{"ast":null,"code":"const API_BASE = 'http://localhost:3001/api';\nclass ApiService {\n  async request(endpoint, options) {\n    const response = await fetch(`${API_BASE}${endpoint}`, {\n      headers: {\n        'Content-Type': 'application/json',\n        ...(options === null || options === void 0 ? void 0 : options.headers)\n      },\n      ...options\n    });\n    if (!response.ok) {\n      const error = await response.json().catch(() => ({\n        error: 'Network error'\n      }));\n      throw new Error(error.error || `HTTP ${response.status}`);\n    }\n    return response.json();\n  }\n\n  // Areas\n  async getAreas() {\n    return this.request('/areas');\n  }\n  async createArea(name) {\n    return this.request('/areas', {\n      method: 'POST',\n      body: JSON.stringify({\n        name\n      })\n    });\n  }\n\n  // Tasks\n  async getTasks(filters) {\n    const params = new URLSearchParams();\n    if (filters) {\n      Object.entries(filters).forEach(([key, value]) => {\n        if (value !== undefined && value !== null) {\n          params.append(key, value.toString());\n        }\n      });\n    }\n    const queryString = params.toString();\n    const endpoint = queryString ? `/tasks?${queryString}` : '/tasks';\n    return this.request(endpoint);\n  }\n  async createTask(taskData) {\n    return this.request('/tasks', {\n      method: 'POST',\n      body: JSON.stringify(taskData)\n    });\n  }\n  async updateTask(id, taskData) {\n    return this.request(`/tasks/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(taskData)\n    });\n  }\n  async updateTaskStatus(id, status, notes) {\n    return this.request(`/tasks/${id}/status`, {\n      method: 'PATCH',\n      body: JSON.stringify({\n        status,\n        notes\n      })\n    });\n  }\n  async deleteTask(id) {\n    return this.request(`/tasks/${id}`, {\n      method: 'DELETE'\n    });\n  }\n  async getTaskHistory(id) {\n    return this.request(`/tasks/${id}/history`);\n  }\n\n  // Export\n  async exportTasks() {\n    return this.request('/export');\n  }\n}\nexport const apiService = new ApiService();","map":{"version":3,"names":["API_BASE","ApiService","request","endpoint","options","response","fetch","headers","ok","error","json","catch","Error","status","getAreas","createArea","name","method","body","JSON","stringify","getTasks","filters","params","URLSearchParams","Object","entries","forEach","key","value","undefined","append","toString","queryString","createTask","taskData","updateTask","id","updateTaskStatus","notes","deleteTask","getTaskHistory","exportTasks","apiService"],"sources":["C:/Users/qihan/OneDrive/Documents/CursorProjects/ToDoList/client/src/services/api.ts"],"sourcesContent":["import { Task, Area, CreateTaskData, UpdateTaskData, TaskFilters, TaskHistory } from '../types';\r\n\r\nconst API_BASE = 'http://localhost:3001/api';\r\n\r\nclass ApiService {\r\n  private async request<T>(endpoint: string, options?: RequestInit): Promise<T> {\r\n    const response = await fetch(`${API_BASE}${endpoint}`, {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        ...options?.headers,\r\n      },\r\n      ...options,\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const error = await response.json().catch(() => ({ error: 'Network error' }));\r\n      throw new Error(error.error || `HTTP ${response.status}`);\r\n    }\r\n\r\n    return response.json();\r\n  }\r\n\r\n  // Areas\r\n  async getAreas(): Promise<Area[]> {\r\n    return this.request<Area[]>('/areas');\r\n  }\r\n\r\n  async createArea(name: string): Promise<Area> {\r\n    return this.request<Area>('/areas', {\r\n      method: 'POST',\r\n      body: JSON.stringify({ name }),\r\n    });\r\n  }\r\n\r\n  // Tasks\r\n  async getTasks(filters?: TaskFilters): Promise<Task[]> {\r\n    const params = new URLSearchParams();\r\n    if (filters) {\r\n      Object.entries(filters).forEach(([key, value]) => {\r\n        if (value !== undefined && value !== null) {\r\n          params.append(key, value.toString());\r\n        }\r\n      });\r\n    }\r\n    \r\n    const queryString = params.toString();\r\n    const endpoint = queryString ? `/tasks?${queryString}` : '/tasks';\r\n    return this.request<Task[]>(endpoint);\r\n  }\r\n\r\n  async createTask(taskData: CreateTaskData): Promise<Task> {\r\n    return this.request<Task>('/tasks', {\r\n      method: 'POST',\r\n      body: JSON.stringify(taskData),\r\n    });\r\n  }\r\n\r\n  async updateTask(id: number, taskData: UpdateTaskData): Promise<{ success: boolean }> {\r\n    return this.request<{ success: boolean }>(`/tasks/${id}`, {\r\n      method: 'PUT',\r\n      body: JSON.stringify(taskData),\r\n    });\r\n  }\r\n\r\n  async updateTaskStatus(id: number, status: Task['status'], notes?: string): Promise<{ success: boolean; status: Task['status'] }> {\r\n    return this.request<{ success: boolean; status: Task['status'] }>(`/tasks/${id}/status`, {\r\n      method: 'PATCH',\r\n      body: JSON.stringify({ status, notes }),\r\n    });\r\n  }\r\n\r\n  async deleteTask(id: number): Promise<{ success: boolean }> {\r\n    return this.request<{ success: boolean }>(`/tasks/${id}`, {\r\n      method: 'DELETE',\r\n    });\r\n  }\r\n\r\n  async getTaskHistory(id: number): Promise<TaskHistory[]> {\r\n    return this.request<TaskHistory[]>(`/tasks/${id}/history`);\r\n  }\r\n\r\n  // Export\r\n  async exportTasks(): Promise<Task[]> {\r\n    return this.request<Task[]>('/export');\r\n  }\r\n}\r\n\r\nexport const apiService = new ApiService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}